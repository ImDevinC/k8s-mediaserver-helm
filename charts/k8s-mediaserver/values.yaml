# Default values for k8s-mediaserver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

general:
  ingress_host: k8s-mediaserver.k8s.test
  plex_ingress_host: k8s-plex.k8s.test
  image_tag: latest
  #UID to run the process with
  puid: 1000
  #GID to run the process with
  pgid: 1000
  #Persistent storage selections and pathing
  storage:
    customVolume: false #set to true if not using a PVC (must provide volume below)
    pvcName: mediaserver-pvc
    size: 5Gi
    pvcStorageClass: ""
    # the path starting from the top level of the pv you're passing. If your share is server.local/share/, then tv is server.local/share/media/tv
    subPaths:
      tv: media/tv
      movies: media/movies
      downloads: downloads
      transmission: transmission
      sabnzbd: sabnzbd
      config: config
    volumes: {}
  ingress:
    ingressClassName: ""

sonarr:
  enabled: true
  container:
    image: docker.io/linuxserver/sonarr
    nodeSelector: {}
    port: 8989
  service:
    type: ClusterIP
    port: 8989
    nodePort:
    extraLBService: false
    # Defines an additional LB service, requires cloud provider service or MetalLB
  ingress:
    enabled: true
    annotations: {}
    path: /sonarr
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}
  exportarr:
    image: ghcr.io/onedr0p/exportarr
    imageTag: v1.0.0
    enabled: true
    serviceMonitor: true
    apiKey: ""
    port: 9090
    urlBase: /test

radarr:
  enabled: true
  container:
    image: docker.io/linuxserver/radarr
    nodeSelector: {}
    port: 7878
  service:
    type: ClusterIP
    port: 7878
    nodePort:
    extraLBService: false
    # Defines an additional LB service, requires cloud provider service or MetalLB
  ingress:
    enabled: true
    annotations: {}
    path: /radarr
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}
  exportarr:
    image: ghcr.io/onedr0p/exportarr
    imageTag: v1.0.0
    enabled: true
    serviceMonitor: true
    apiKey: ""
    # apiSecret: xxx
    port: 9090
    urlBase: ""

jackett:
  enabled: true
  container:
    image: docker.io/linuxserver/jackett
    nodeSelector: {}
    port: 9117
  service:
    type: ClusterIP
    port: 9117
    nodePort:
    extraLBService: false
    # Defines an additional LB service, requires cloud provider service or MetalLB
  ingress:
    enabled: true
    annotations: {}
    path: /jackett
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts:
    - name: jackett-extra
      hostPath:
        path: /tmp/

transmission:
  enabled: true
  container:
    image: docker.io/linuxserver/transmission
    nodeSelector: {}
    port:
      utp: 9091
      peer: 51413
  service:
    utp:
      type: ClusterIP
      port: 9091
      nodePort:
      # Defines an additional LB service, requires cloud provider service or MetalLB
      extraLBService: false
    peer:
      type: ClusterIP
      port: 51413
      nodePort:
      nodePortUDP:
      # Defines an additional LB service, requires cloud provider service or MetalLB
      extraLBService: false
  ingress:
    enabled: true
    annotations: {}
    path: /transmission
    tls:
      enabled: false
      secretName: ""
  config:
    auth:
      enabled: false
      username: ""
      password: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}

sabnzbd:
  enabled: true
  container:
    image: docker.io/linuxserver/sabnzbd
    nodeSelector: {}
    port:
      http: 8080
      https: 9090
  service:
    http:
      type: ClusterIP
      port: 8080
      nodePort:
      # Defines an additional LB service, requires cloud provider service or MetalLB
      extraLBService: false
    https:
      type: ClusterIP
      port: 9090
      nodePort:
      # Defines an additional LB service, requires cloud provider service or MetalLB
      extraLBService: false
  ingress:
    enabled: true
    annotations: {}
    path: /sabnzbd
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}

plex:
  enabled: true
  claim: "CHANGEME"
  hostNetwork: false # Will sometimes be needed for upnp forwarding
  replicaCount: 1
  container:
    image: docker.io/linuxserver/plex
    nodeSelector: {}
    port: 32400
  service:
    type: ClusterIP
    port: 32400
    nodePort:
    # Defines an additional LB service, requires cloud provider service or MetalLB
    extraLBService: false
  ingress:
    enabled: true
    annotations: {}
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}

tautulli:
  enabled: true
  container:
    image: docker.io/linuxserver/tautulli
    nodeSelector: {}
    port: 8181
  service:
    type: ClusterIP
    port: 8181
    nodePort:
    # Defines an additional LB service, requires cloud provider service or MetalLB
    extraLBService: false
  ingress:
    enabled: true
    annotations: {}
    path: /tautulli
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}

prowlarr:
  enabled: true
  container:
    image: docker.io/linuxserver/prowlarr
    tag: develop
    nodeSelector: {}
    port: 9696
  service:
    type: ClusterIP
    port: 9696
    nodePort:
    extraLBService: false
  ingress:
    enabled: true
    annotations: {}
    path: /prowlarr
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}

requestrr:
  enabled: true
  container:
    image: thomst08/requestrr
    nodeSelector: {}
    port: 4545
  service:
    type: ClusterIP
    port: 4545
    nodePort:
    extraLBService: false
  ingress:
    enabled: true
    annotations: {}
    path: /requestrr
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}

overseerr:
  enabled: true
  container:
    image: docker.io/linuxserver/overseerr
    nodeSelector: {}
    port: 5055
  service:
    type: ClusterIP
    port: 5055
    nodePort:
    extraLBService: false
  ingress:
    enabled: true
    annotations: {}
    path: /overseerr
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}

mylarr:
  enabled: true
  container:
    image: lscr.io/linuxserver/mylar3
    nodeSelector: {}
    port: 8090
  service:
    type: ClusterIP
    port: 8090
    nodePort:
    extraLBService: false
    # Defines an additional LB service, requires cloud provider service or MetalLB
  ingress:
    enabled: true
    annotations: {}
    path: /mylarr
    tls:
      enabled: false
      secretName: ""
  resources: {}
  volume: {}
  extraVolumes: {}
  extraVolumeMounts: {}
